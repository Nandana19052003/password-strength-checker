import Head from 'next/head';
import { useEffect, useState } from 'react';
import calculatePasswordStrength from '@/utils/crackTime';
import { ZxcvbnResult } from '@zxcvbn-ts/core';

const HomePage = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [result, setResult] = useState<ZxcvbnResult|null>(null)
  const [isPasswordVisible, setIsPasswordVisible] = useState(false);
  const containsUpperCase = /[A-Z]/.test(searchTerm);
  const containsLowerCase = /[a-z]/.test(searchTerm);
  const containsNumbers = /\d/.test(searchTerm);
  const containsSpecialChars = /[$-/:-?{-~!"^_`\[\]]/.test(searchTerm);
  const colorBarWidth = result && `${result.score / 5 * 100}%`;


  useEffect(() => {
    if (searchTerm?.length > 0) {
      calculatePasswordStrength(searchTerm).then((r) => setResult(r));
    }
  }, [searchTerm]);

  let strength = '';
  let color = '';
  let crackTimeDisplay = '';
 

  if(result) {
    if(result.score === 0) {
        strength = 'The Password is Very Weak';
        color = 'text-red-500';
    } else if(result.score === 1) {
        strength = 'The Password is Weak';
        color = 'text-red-500';
    } else if(result.score === 2) {
        strength = 'The Password is Medium';
        color = 'text-yellow-500';
    } else if(result.score === 3) {
        strength = 'Strong';
        color = 'text-green-500';
    } else if(result.score === 4) {
        strength = 'The Password is Very Strong';
        color = 'text-green-500';
    }

    if (result.crackTimesDisplay) {
      crackTimeDisplay = result.crackTimesDisplay.offlineSlowHashing1e4PerSecond;
    }
  }

  const togglePasswordVisibility = () => {
      setIsPasswordVisible(!isPasswordVisible);
  }
  
  console.log(result);

  return (
    <>
      <Head>
        <title>Password Strength Checker</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center mt-8">
        <header className="bg-gradient-to-r from-pink-500 to-purple-500 bg-center bg-cover py-12 w-full">
        <h1 className="text-white text-center text-4xl font-bold px-4">
            Check Your Password Strength
          </h1>
        </header>
        <div className="w-full max-w-md">
          <div className="relative">
            <input
              type={isPasswordVisible ? "text" : "password"}
              placeholder="Enter Your Password"
              className="w-full p-4 my-4 rounded-md border border-gray-400"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <div className="right-4 top-10">
              <input
                  type="checkbox"
                  checked={isPasswordVisible}
                  onChange={togglePasswordVisibility}
                  className="form-checkbox h-5 w-5 text-pink-500"
              />
              <span className="ml-2 text-gray-700">
                Show Password
              </span>
            </div>
            <div className="w-full h-2 bg-gradient-to-r from-red-500 via-yellow-500 to-green-500 rounded-md mt-2">
  <div className="h-full rounded-md bg-white" style={{ width: `${colorBarWidth}` }}></div>
              {result && (
  <div>
  {result && (
    <div className="text-center text-2xl">
      <div className={color}>{strength}</div>
      <div>
        {result.score / 5 * 100}% ({result.score}/5)
        <div className="text-gray-500 text-sm">{crackTimeDisplay} </div>
      </div>
      {result.feedback.warning && (
        <div className="text-yellow-600 text-sm mt-2">{result.feedback.warning}</div>
      )}
      {result.feedback.suggestions.length > 0 && (
        <div className="text-gray-500 text-sm mt-2">
          Suggestions:
          <ul className="list-disc ml-4">
            {result.feedback.suggestions.map((suggestion) => (
              <li key={suggestion}>{suggestion}</li>
            ))}
          </ul>
        </div>
      )}
      <div className="text-gray-500 text-sm mt-2">
        {containsUpperCase && "Contains uppercase letters"}
        {containsLowerCase && "Contains lowercase letters"}
        {containsNumbers && "Contains numbers"}
        {containsSpecialChars && "Contains special characters"}
      </div>
    </div>
  )}
</div>

)}

              </div>
            </div>
        </div>
      </main>
    </>
  );

};

export default HomePage;
